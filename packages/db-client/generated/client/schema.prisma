// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  phone_or_email String?   @unique
  avatar         String?
  name           String
  username       String?   @unique
  date_of_birth  DateTime
  role           Role      @default(USER)
  reviews        Review[]
  bookings       Booking[]
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
}

model Booking {
  id                String        @id @default(uuid())
  user_id           String
  user              User          @relation(fields: [user_id], references: [id])
  service_id        String
  service           Service       @relation(fields: [service_id], references: [id])
  date              DateTime      @db.Date
  status            BookingStatus @default(PENDING)
  payment_status    PaymentStatus @default(PENDING)
  payment_intent_id String?
  total_amount      Decimal       @db.Decimal(10, 2)
  review            Review?
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt

  @@unique([service_id, date])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
  FAILED
}

model Availability {
  id          String   @id @default(uuid())
  service_id  String
  service     Service  @relation(fields: [service_id], references: [id])
  date        DateTime @db.Date
  is_bookable Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@unique([service_id, date])
}

model Service {
  id           String         @id @default(uuid())
  name         String
  media        String[]
  description  String
  price        Decimal
  reviews      Review[]
  availability Availability[]
  bookings     Booking[]
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
}

model Review {
  id         String   @id @default(uuid())
  rating     Int      @db.SmallInt
  comment    String   @db.Text
  user_id    String
  service_id String
  booking_id String?  @unique
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  service    Service  @relation(fields: [service_id], references: [id], onDelete: Cascade)
  booking    Booking? @relation(fields: [booking_id], references: [id], onDelete: SetNull)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([user_id, service_id])
  @@index([user_id])
  @@index([service_id])
  @@index([booking_id])
}

enum Role {
  USER
  ADMIN
}
