// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  phone_or_email String?   @unique
  avatar         String?
  name           String
  username       String?   @unique
  date_of_birth  DateTime
  role           Role      @default(USER)
  reviews        Review[]
  bookings       Booking[]
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
}

model Booking {
  id              String        @id @default(uuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  serviceId       String
  service         Service       @relation(fields: [serviceId], references: [id])
  date            DateTime      @db.Date
  status          BookingStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentIntentId String? // To store payment reference
  totalAmount     Decimal       @db.Decimal(10, 2)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([serviceId, date])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  REFUNDED
  FAILED
}

model Availability {
  id         String   @id @default(uuid())
  serviceId  String
  service    Service  @relation(fields: [serviceId], references: [id])
  date       DateTime @db.Date
  isBookable Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([serviceId, date])
}

model Service {
  id           String         @id @default(uuid())
  name         String
  media        String[]
  description  String
  price        Decimal
  reviews      Review[]
  availability Availability[]
  bookings     Booking[]
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
}

model Review {
  id         String   @id @default(uuid())
  rating     Int
  comment    String?
  userId     String
  productId  String
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  service    Service? @relation(fields: [productId], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}
